name: Build

on:
  push:
    branches:
      - main
jobs:
  build:
    name: Build,Test,and Analyze
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
        
    - name: Set up .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0.x'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Restore .NET dependencies
      run: dotnet restore
      working-directory: api/Basic3TierAPI

    - name: Build .NET project
      run: dotnet build --no-restore --configuration Release
      working-directory: api/Basic3TierAPI

    - name: Run .NET tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      working-directory: api/Basic3TierAPI

    - name: Install frontend dependencies
      run: npm install
      working-directory: ui
      
    - name: Build frontend
      run: npm run build
      working-directory: ui
      
    - name: SonarQube Scan
      run: SonarSource/sonarqube-scan-action@v4
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
 # Set up Docker Buildx (enables multi-platform builds)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub (or GitHub Container Registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username (or GHCR)
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password (or GHCR token)

    # Build Docker image for Backend
    - name: Build Backend Docker image
      run: |
        docker build -t myorg/backend:latest ./backend

    # Build Docker image for Frontend
    - name: Build Frontend Docker image
      run: |
        docker build -t myorg/frontend:latest ./frontend

    # Optionally, push images to Docker Hub or GHCR
    - name: Push Backend Docker image to Docker Hub
      run: |
        docker push myorg/backend:latest
      if: github.ref == 'refs/heads/main'  # Push only for main branch

    - name: Push Frontend Docker image to Docker Hub
      run: |
        docker push myorg/frontend:latest
      if: github.ref == 'refs/heads/main'  # Push only for main branch
      
# Set up SSH key for access to the Azure VM
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "$AZURE_VM_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
      env:
        AZURE_VM_PRIVATE_KEY: ${{ secrets.AZURE_VM_PRIVATE_KEY }}

    # Add Azure VM IP to known hosts to avoid SSH prompt
    - name: Add VM to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.AZURE_VM_IP }} >> ~/.ssh/known_hosts

    # Run Docker commands on the Azure VM
    - name: SSH to Azure VM and run Docker commands
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USERNAME }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
          docker --version
          # Your Docker commands go here, for example:
          docker build -t my-app .
          docker run -d -p 80:80 my-app
        EOF
      env:
        AZURE_VM_USERNAME: ${{ secrets.AZURE_VM_USERNAME }}
        AZURE_VM_IP: ${{ secrets.AZURE_VM_IP }}   
        
  # Step 4: Pull the Backend Docker image
    - name: Pull Backend Docker image
      run: |
        docker pull myorg/backend:latest  # Replace 'myorg/backend' with your image name

    # Step 5: Pull the Frontend Docker image
    - name: Pull Frontend Docker image
      run: |
        docker pull myorg/frontend:latest  # Replace 'myorg/frontend' with your image name  

    # Optional: Run a container to verify that the image is working (for testing purposes)
    - name: Run Backend container (optional)
      run: |
        docker run -d --name backend-container myorg/backend:latest
        docker ps  # List running containers to verify the backend is running

    - name: Run Frontend container (optional)
      run: |
        docker run -d --name frontend-container myorg/frontend:latest
        docker ps  # List running containers to verify the frontend is running
        
   
              
        
